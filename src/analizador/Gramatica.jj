
PARSER_BEGIN(Gramatica)
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;

class Gramatica{

    public static void main(String[] args )  throws ParseException, FileNotFoundException {
    Scanner entrada = new Scanner(System.in);
    System.out.println("Ingresa el nombre del archivo que quieres ejecutar");
    String str = entrada.next();
        try{
            Gramatica analizador = new Gramatica(new BufferedReader(new FileReader(str + ".txt")));
            analizador.Programa();
            System.out.println("\tEjecucion finalizada sin errores");
        }
        
        catch(ParseException e){
            
            System.out.println(e.getMessage());
            System.out.println("\tEjecucion finalizada");
        }
    }
}


PARSER_END (Gramatica)


//OPERADORES ARITMETICOS
TOKEN : 
{
    <ASIGNACION : "=">          //1
    |<MAS : "+">                //2
    |<MENOS : "-">              //3
    |<MULTIPLICAR : "*">        //4 
    |<DIVIDIR : "/">            //5
    |<INCR : "++">              //6
    |<DECR : "--">              //7
    |<MODULO : "%">             //8
    |<SUMAIGUAL : "+=">         //9
    |<RESTAIGUAL : "-=">        //10
    |<MULTIGUAL : "*=">         //11
    |<DIVIDIRIGUAL : "/=">      //12
    |<MODULOIGUAL : "%=">       //13
}

//PALABRAS RESERVADAS
TOKEN : 
{
    <VOID : "vacio">            //14
    | <MAIN : "principal">      //15
    | <WRITE : "imprimir">      //16
    | <READ : "leer">           //17
    | <IF : "cuando">           //18
    | <ELSE : "sino">           //19
    | <ELSEIF : "sino_cuando">  //20
    | <RETURN : "retorno">      //21
    | <BREAK : "romper">        //22
    | <FOR : "ciclo_for">       //23
    | <WHILE : "ciclo_mientras">//24
}

//CARACTERES ESPECIALES
TOKEN :
{
    <PARI : "(">                //25
    | <PARD : ")">              //26
    | <LLAVEI : "{">            //27
    | <LLAVED : "}">            //28
    | <DELIMITER : ";">         //29
    | <COMA : ",">              //30
    | <COMILLA : "\"">          //31
    | <COMENTARIO : "#">        //32
    | <PUNTO : ".">             //33
}


//OPERADORES LOGICOS
TOKEN : 
{
    <IGUALDAD : "==">           //34
    | <MAYOR : ">">             //35
    | <MAYORI : ">=">           //36
    | <MENOR : "<">             //37
    | <MENORI : "<=">           //38
    | <DIFERENCIA : "!=">       //39
    | <NEGACION : "!">          //40
    | <AND : "&&">              //41
    | <OR : "||">               //42
}


    //VALORES PREDETERMINADOS
    TOKEN : 
    {
        <TRUE : "verdadero">        //43
        |<FALSE : "falso">           //44
        |<NULL  : "nulo">            //45
    }




//TIPOS DE DATOS
TOKEN :
{
    <INT : "entero">            //46
    | <FLOAT : "flotante">      //47
    | <STRING : "cadena">       //48
    | <BOOL : "bool">           //49
    | <CARACTER : "caracter">       //50
    | <NUMERO : (["0" - "9"])+>         //51
    | <IDENTIFICADOR :  ["a" - "z", "A" - "Z"](["a" - "z", "A" - "Z", "0" - "9", "_"])*>    //52
    | <DECIMAL : (["0" - "9"])+["."](["0" - "9"])+>                 //53
    | <CADENA : "\""(~["\""])*"\"" > //54
    | <CHAR : "\'"(~["\""])"\'" >      //55
    | <DOSPUNTOS : ":">     //56
    
}



SKIP : 
{
    " " | "\n" | "\r" | "\r\n" | "\t" 
}


void Programa() :
{}
{
    Bloque()
}


void Bloque() : 
{}
{
(
    <ASIGNACION>          
    |<MAS>                
    |<MENOS>              
    |<MULTIPLICAR>         
    |<DIVIDIR>            
    |<INCR>              
    |<DECR >                  
    |<MODULO >             
    |<SUMAIGUAL >         
    |<RESTAIGUAL>       
    |<MULTIGUAL >         
    |<DIVIDIRIGUAL >      
    |<MODULOIGUAL >
    | <VOID >          
    | <MAIN >      
    | <WRITE >      
    | <READ >           
    | <IF >           
    | <ELSE >           
    | <ELSEIF >  
    | <RETURN >      
    | <BREAK >        
    | <FOR >       
    | <WHILE >
    | <IGUALDAD >           
    | <MAYOR >             
    | <MAYORI >           
    | <MENOR >             
    | <MENORI >           
    | <DIFERENCIA >       
    | <NEGACION >          
    | <AND >              
    | <OR >
    | <TRUE >        
    | <FALSE>           
    | <NULL >
    | <INT >            
    | <FLOAT >      
    | <STRING>       
    | <BOOL >           
    | <CARACTER >       
    | <NUMERO >         
    | <IDENTIFICADOR >    
    | <DECIMAL >                 
    | <CADENA > 
    | <CHAR >      
    | <DOSPUNTOS >
    |  <PARI >                
    | <PARD >              
    | <LLAVEI >            
    | <LLAVED >            
    | <DELIMITER >         
    | <COMA >              
    | <COMILLA >          
    | <COMENTARIO >            
    | <PUNTO >
    
)*
    <EOF>
}



