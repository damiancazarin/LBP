options{
    
    LOOKAHEAD=1;
}


PARSER_BEGIN(Gramatica)
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;

class Gramatica{

    public static void main(String[] args )  throws ParseException, FileNotFoundException {
    Scanner entrada = new Scanner(System.in);
    //System.out.println("Ingresa el nombre del archivo que quieres ejecutar");
    //String str = entrada.next();
        try{
            Gramatica analizador = new Gramatica(new BufferedReader(new FileReader("entrada2" + ".txt")));
            analizador.Programa();
            System.out.println("\tEjecucion finalizada");
        }
        
        catch(ParseException e){
            
            System.out.println(e.getMessage());
            System.out.println("\tEjecucion finalizada");
        }
    }
}


PARSER_END (Gramatica)


//OPERADORES ARITMETICOS
TOKEN : 
{
    <ASIGNACION : "=">  {System.out.println("Token detectado: Operador_Asignacion" +  image);}        //1
    |<MAS : "+">        {System.out.println("Token detectado: Opeador_Mas" +  image);}        //2
    |<MENOS : "-">      {System.out.println("Token detectado: Operador_Menos" +  image);}        //3
    |<MULTIPLICAR : "*">{System.out.println("Token detectado: Operador_Multiplicar" +  image);}        //4 
    |<DIVIDIR : "/">    {System.out.println("Token detectado: " +  image);}        //5
    |<INCR : "++">      {System.out.println("Token detectado: " +  image);}        //6
    |<DECR : "--">      {System.out.println("Token detectado: " +  image);}        //7
    |<MODULO : "%">        {System.out.println("Token detectado: " +  image);}     //8
    |<SUMAIGUAL : "+=">    {System.out.println("Token detectado: " +  image);}     //9
    |<RESTAIGUAL : "-=">   {System.out.println("Token detectado: " +  image);}     //10
    |<MULTIGUAL : "*=">    {System.out.println("Token detectado: " +  image);}     //11
    |<DIVIDIRIGUAL : "/="> {System.out.println("Token detectado: " +  image);}     //12
    |<MODULOIGUAL : "%=">  {System.out.println("Token detectado: " +  image);}     //13
}

//PALABRAS RESERVADAS
TOKEN : 
{
    <VOID : "vacio">          {System.out.println("Token detectado: " +  image);}  //14
    | <MAIN : "principal">    {System.out.println("Token detectado: " +  image);}  //15
    | <WRITE : "imprimir">    {System.out.println("Token detectado: " +  image);}  //16
    | <READ : "leer">         {System.out.println("Token detectado: " +  image);}  //17
    | <IF : "cuando">         {System.out.println("Token detectado: " +  image);}  //18
    | <ELSE : "sino">           {System.out.println("Token detectado: " +  image);}//19
    | <ELSEIF : "sino_cuando">  {System.out.println("Token detectado: " +  image);}//20
    | <RETURN : "retorno">      {System.out.println("Token detectado: " +  image);}//21
    | <BREAK : "romper">        {System.out.println("Token detectado: " +  image);}//22
    | <FOR : "ciclo_for">       {System.out.println("Token detectado: " +  image);}//23
    | <WHILE : "ciclo_mientras">{System.out.println("Token detectado: " +  image);}//24
}

//CARACTERES ESPECIALES
TOKEN :
{
    <PARI : "(">                {System.out.println("Token detectado: " +  image);}//25
    | <PARD : ")">              {System.out.println("Token detectado: " +  image);}//26
    | <LLAVEI : "{">            {System.out.println("Token detectado: " +  image);}//27
    | <LLAVED : "}">            {System.out.println("Token detectado: " +  image);}//28
    | <DELIMITER : ";">         {System.out.println("Token detectado: " +  image);}//29
    | <COMA : ",">              {System.out.println("Token detectado: " +  image);}//30
    | <COMILLA : "\"">          {System.out.println("Token detectado: " +  image);}//31
    | <COMENTARIO : "#">        {System.out.println("Token detectado: " +  image);}//32
    | <PUNTO : ".">             {System.out.println("Token detectado: " +  image);}//33
}


//OPERADORES LOGICOS
TOKEN : 
{
    <IGUALDAD : "==">           {System.out.println("Token detectado: " +  image);}//34
    | <MAYOR : ">">             {System.out.println("Token detectado: " +  image);}//35
    | <MAYORI : ">=">           {System.out.println("Token detectado: " +  image);}//36
    | <MENOR : "<">             {System.out.println("Token detectado: " +  image);}//37
    | <MENORI : "<=">           {System.out.println("Token detectado: " +  image);}//38
    | <DIFERENCIA : "!=">       {System.out.println("Token detectado: " +  image);}//39
    | <NEGACION : "!">          {System.out.println("Token detectado: " +  image);}//40
    | <AND : "&&">              {System.out.println("Token detectado: " +  image);}//41
    | <OR : "||">               {System.out.println("Token detectado: " +  image);}//42
}


    //VALORES PREDETERMINADOS
    TOKEN : 
    {
        <TRUE : "verdadero">        {System.out.println("Token detectado: " +  image);}//43
        |<FALSE : "falso">           {System.out.println("Token detectado: " +  image);}//44
        |<NULL  : "nulo">            {System.out.println("Token detectado: " +  image);}//45
    }




//TIPOS DE DATOS
TOKEN :
{
    <INT : "entero">            {System.out.println("Token detectado: " +  image);}//46
    | <FLOAT : "flotante">      {System.out.println("Token detectado: " +  image);}//47
    | <STRING : "cadena">       {System.out.println("Token detectado: " +  image);}//48
    | <BOOL : "bool">           {System.out.println("Token detectado: " +  image);}//49
    | <CARACTER : "caracter">   {System.out.println("Token detectado: " +  image);}    //50
    | <NUMERO : (["0" - "9"])+>         {System.out.println("Token detectado: " +  image);}//51
    | <IDENTIFICADOR :  ["a" - "z", "A" - "Z"](["a" - "z", "A" - "Z", "0" - "9", "_"])*>   {System.out.println("Token detectado: " +  image);} //52
    | <DECIMAL : (["0" - "9"])+["."](["0" - "9"])+>                 {System.out.println("Token detectado: " +  image);}//53
    | <CADENA : "\""(~["\""])*"\"" > {System.out.println("Token detectado: " +  image);} //54
    | <CHAR : "\'"(~["\""])"\'" >     {System.out.println("Token detectado: " +  image);} //55
    | <DOSPUNTOS : ":">    {System.out.println("Token detectado: " +  image);} //56
    
}



SKIP : 
{
    " " | "\n" | "\r" | "\r\n" | "\t" 
}


void Programa() :
{}
{
try{
    <MAIN><PARI><PARD><LLAVEI>Bloque()<LLAVED><EOF>
}catch(ParseException e){
        System.out.println("\nError Sintactico (PROGRAMA) en linea " + token.beginLine  + ", columna  " + token.beginColumn + ".\n" +  
 "Se encontro \"" + token.image + "\", se esperaba "+ e.TokenSequences );
    }
}


void Bloque() : 
{}
{

try{
(
    <ASIGNACION>          
    |<MAS>                
    |<MENOS>              
    |<MULTIPLICAR>         
    |<DIVIDIR>            
    |<INCR>              
    |<DECR >                  
    |<MODULO >             
    |<SUMAIGUAL >         
    |<RESTAIGUAL>       
    |<MULTIGUAL >         
    |<DIVIDIRIGUAL >      
    |<MODULOIGUAL >
    | <VOID >             
    | <WRITE >      
    | <READ >           
    | <IF >           
    | <ELSE >           
    | <ELSEIF >  
    | <RETURN >      
    | <BREAK >        
    | <FOR >       
    | <WHILE >
    | <IGUALDAD >           
    | <MAYOR >             
    | <MAYORI >           
    | <MENOR >             
    | <MENORI >           
    | <DIFERENCIA >       
    | <NEGACION >          
    | <AND >              
    | <OR >
    | <TRUE >        
    | <FALSE>           
    | <NULL >
    | <INT >            
    | <FLOAT >      
    | <STRING>       
    | <BOOL >           
    | <CARACTER >       
    | <NUMERO >         
    | <IDENTIFICADOR >    
    | <DECIMAL >                 
    | <CADENA > 
    | <CHAR >      
    | <DOSPUNTOS >
    | <PARI >                
    | <PARD >                         
    | <DELIMITER >         
    | <COMA >              
    | <COMILLA >          
    | <COMENTARIO >            
    | <PUNTO >
)*

}
catch(ParseException e){

System.out.println("\nError Sintactico (BLOQUE) en linea " + token.beginLine + ", columna  " + token.beginColumn + ".\n El token  \"" + token.image + 
"\" no es reconocido por el lenguaje");

}catch(TokenMgrError a){
System.out.println("\nError Lexico en linea " + token.beginLine  + ", columna  " + token.beginColumn + ".\n El token  \"" + token.image + 
"\" no es reconocido por el lenguaje");
}

}



