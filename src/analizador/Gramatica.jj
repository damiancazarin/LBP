options{
    
    LOOKAHEAD=1;
}


PARSER_BEGIN(Gramatica)

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;
import java.io.Reader;

class Gramatica{
  
  static int numeroErrores = 0;
	static boolean flag = false;
	public static void main(String[] args) throws ParseException{
                try{
		Gramatica analizador = new Gramatica(new BufferedReader(new FileReader("entrada2" + ".txt")));
                
                
		String salidaError = "";
		salidaError = analizador.Inicio(salidaError);
		if(salidaError==""){
			System.out.println("Analizador: Todo correcto!");
		}else{
			System.out.println("Analizador: Se han encontrado errores en el analisis");
			System.out.println("Numero de erroress: "+numeroErrores);
			System.out.println(salidaError);
                    }
                }catch(FileNotFoundException e){
                System.out.println("nomeimporta");
                }
        }   

	private static String salidaError(Token currentToken, int[][] expectedTokenSequences, String[] tokenImage, String tipo){
		String eol = System.getProperty("line.separator", "\n");
		StringBuffer expected = new StringBuffer();
		int maxSize = 0;
		String retval = "";
		for (int i = 0; i < expectedTokenSequences.length; i++) {
			if (maxSize < expectedTokenSequences[i].length) {
				maxSize = expectedTokenSequences[i].length;
			}
			for (int j = 0; j < expectedTokenSequences[i].length; j++) {
				expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
			}
			if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
				expected.append("...");
			}
			expected.append(eol).append("    ");
		}
		
		if(tipo.equals("sintactico")){
			numeroErrores++;
			retval += "Analizador: Ha ocurrido un error sintactico\n";
			retval += "Se encontro: ";
			Token tok = currentToken.next;
			for (int i = 0; i < maxSize; i++) {
				if (i != 0){ 
				retval += " ";
				}
				if (tok.kind == 0) {
					retval += tokenImage[0];
					break;
				}
				retval += " " + tokenImage[tok.kind];
				tok = tok.next;
			}
                        //int linea = currentToken.next.beginLine + 1;
			retval += " en la linea: " + currentToken.next.beginLine + ", columna: " + currentToken.next.beginColumn;
			retval += eol;
			if (expectedTokenSequences.length == 1) {
				retval += "Esperaba: " + eol + "    ";
			} else {
				retval += "Esperaba uno de estos:" + eol + "    ";
			}
				retval += expected.toString();
			return retval;
		}
		if(tipo.equals("lexico")){
			numeroErrores++;
			retval +="Analizador: Ha ocurrido un error lexico\n";
			retval += "Se encontro: ";
			Token tok = currentToken.next;
			for (int i = 0; i < maxSize; i++) {
				if (i != 0){
					retval += " ";
				}
				if (tok.kind == 0) {
					retval += tokenImage[0];
					break;
				}
				retval += add_escapes(tok.image);
				tok = tok.next;
			}
			retval += " en la linea: " + currentToken.next.beginLine + ", columna: " + currentToken.next.beginColumn;
			retval += eol;
			return retval;
		}
		return "";
	}

	private String Inicio(String err){
		try{
			if(flag == true){
				Bloque();
			}else if(flag == false){
				Programa();
			}
		}catch(ParseException e){
			boolean errorLexico = true;
			flag = true;

			for(int i=0;i<tokenImage.length;i++){
				if(tokenImage[e.currentToken.next.kind]==tokenImage[i]&&tokenImage[e.currentToken.next.kind]!=tokenImage[ERRORES]){
					errorLexico=false;
				}
			}
						
			Token t=e.currentToken;
			while(t!=null && t.next!=null){
				t = getNextToken();
				if(t.next==null){
					break;
				}
			}

			if(errorLexico){
				err +=salidaError(e.currentToken, e.expectedTokenSequences, e.tokenImage, "lexico");
			}else{
				err +=salidaError(e.currentToken, e.expectedTokenSequences, e.tokenImage, "sintactico");
			}

			if(token.kind != EOF){
				err=Inicio(err);
			}
		}catch(TokenMgrError ex){
			err +=ex.getMessage();
		}
		return err;	
	}


      static String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }
}

/*static void error_skipto(int kind)  {
  errores++;
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}*/








PARSER_END (Gramatica)



SKIP : 
{
    " " | "\n" | "\r" | "\r\n" | "\t" 
}

//OPERADORES ARITMETICOS
TOKEN : 
{
    <ASIGNACION : "=">  {System.out.println("(OP_Asignacion ---> " +  image + ")");}        //1
    |<MAS : "+">        {System.out.println("(OP_Mas ---> " +  image + ")");}        //2
    |<MENOS : "-">      {System.out.println("(OP_Menos ---> " +  image + ")");}        //3
    |<MULTIPLICAR : "*">{System.out.println("(OP_Multiplicar ---> " +  image + ")");}        //4 
    |<DIVIDIR : "/">    {System.out.println("(OP_Division --->" +  image + ")");}        //5
    |<INCR : "++">      {System.out.println("(OP_Incremento ---> " +  image + ")");}        //6
    |<DECR : "--">      {System.out.println("(OP_Decremento ---> " +  image + ")");}        //7
    |<MODULO : "%">        {System.out.println("(OP_Modulo ---> " +  image + ")");}     //8
    |<SUMAIGUAL : "+=">    {System.out.println("(OP_SumaAsignacion ---> " +  image + ")");}     //9
    |<RESTAIGUAL : "-=">   {System.out.println("(OP_RestaAsignacion ---> " +  image + ")");}     //10
    |<MULTIGUAL : "*=">    {System.out.println("(OP_MultiplicacionAsignacion ---> " +  image + ")");}     //11
    |<DIVIDIRIGUAL : "/="> {System.out.println("(OP_DividirAsignacion ---> " +  image + ")");}     //12
    |<MODULOIGUAL : "%=">  {System.out.println("(OP_ModuloAsignacion ---> " +  image + ")");}     //13
}

//PALABRAS RESERVADAS
TOKEN : 
{
     <MAIN : "principal">    {System.out.println("(PR_MAIN ---> " +  image + ")");}  //15
    | <WRITE : "imprimir">    {System.out.println("(PR_IMPRIMIR ---> " +  image + ")");}  //16
    | <READ : "leer">         {System.out.println("(PR_LEER ---> " +  image + ")");}  //17
    | <IF : "cuando">         {System.out.println("(PR_IF ---> " +  image + ")");}  //18
    | <ELSE : "sino">           {System.out.println("(PR_ELSE ---> " +  image + ")");}//19
    | <BREAK : "romper">        {System.out.println("(PR_BREAK ---> " +  image + ")");}//22
    | <FOR : "ciclo_for">       {System.out.println("(PR_FOR ---> " +  image + ")");}//23
    | <WHILE : "ciclo_mientras">{System.out.println("(PR_WHILE ---> " +  image + ")");}//24
}

//CARACTERES ESPECIALES
TOKEN :
{
    <PARI : "(">                {System.out.println("(CE_PARENTESISIZQ ---> \"" +  image + "\")");}//25
    | <PARD : ")">              {System.out.println("(CE_PARENTESISDER ---> \"" +  image + "\")");}//26
    | <LLAVEI : "{">            {System.out.println("(CE_LLAVEIZQ ---> \"" +  image + "\")");}//27
    | <LLAVED : "}">            {System.out.println("(CE_LLAVEDER ---> \"" +  image + "\")");}//28
    | <DELIMITER : ";">         {System.out.println("(CE_DELIMITADOR ---> \"" +  image + "\")");}//29
    | <COMA : ",">              {System.out.println("(CE_COMA ---> \"" +  image + "\")");}//30
    | <COMILLA : "\"">          {System.out.println("(CE_COMILLA ---> \"" +  image + "\")");}//31
    | <COMENTARIO : "#">        {System.out.println("(CE_COMENTARIO ---> \"" +  image + "\")");}//32
}


//OPERADORES LOGICOS
TOKEN : 
{
    <IGUALDAD : "==">           {System.out.println("(OPL_IGUALDAD ---> " +  image + ")");}//34
    | <MAYOR : ">">             {System.out.println("(OPL_MAYORQUE ---> " +  image + ")");}//35
    | <MAYORI : ">=">           {System.out.println("(OPL_MAYORIGUAL ---> " +  image + ")");}//36
    | <MENOR : "<">             {System.out.println("(OPL_MENORQUE ---> " +  image + ")");}//37
    | <MENORI : "<=">           {System.out.println("(OPL_MENORIGUAL ---> " +  image + ")");}//38
    | <DIFERENCIA : "!=">       {System.out.println("(OPL_DIFERENCIA ---> " +  image + ")");}//39
    | <NEGACION : "!">          {System.out.println("(OPL_NEGACION ---> " +  image + ")");}//40
    | <AND : "&&">              {System.out.println("(OPL_AND ---> " +  image + ")");}//41
    | <OR : "||">               {System.out.println("(OPL_OR ---> " +  image + ")");}//42
}


    //VALORES PREDETERMINADOS
    TOKEN : 
    {
        <TRUE : "verdadero">        {System.out.println("(VP_TRUE ---> " +  image + ")");}//43
        |<FALSE : "falso">           {System.out.println("(VP_FALSE ---> " +  image + ")");}//44
        |<NULL  : "nulo">            {System.out.println("(VP_NULL ---> " +  image + ")");}//45
    }




//TIPOS DE DATOS
TOKEN :
{
    <INT : "entero">            {System.out.println("(TD_INT ---> " +  image + ")");}//46
    | <FLOAT : "flotante">      {System.out.println("(TD_FLOAT ---> " +  image + ")");}//47
    | <STRING : "cadena">       {System.out.println("(TD_STRING ---> " +  image + ")");}//48
    | <BOOL : "bool">           {System.out.println("(TD_BOOLEAN ---> " +  image + ")");}//49
    | <CARACTER : "caracter">   {System.out.println("(TD_CHAR ---> " +  image + ")");}    //50
    | <NUMERO : (["0" - "9"])+>         {System.out.println("(NUMBER ---> " +  image + ")");}//51
    | <IDENTIFICADOR :  ["a" - "z", "A" - "Z"](["a" - "z", "A" - "Z", "0" - "9", "_"])*>   {System.out.println("(IDENTIFICADOR ---> " +  image + ")");} //52
    | <DECIMAL : (["0" - "9"])+["."](["0" - "9"])+>                 {System.out.println("(DECIMAL ---> " +  image + ")");}//53
    | <CADENA : "\""(~["\""])*"\"" > {System.out.println("(STRING ---> " +  image + ")");} //54
    | <CHAR : "\'"(~["\""])"\'" >     {System.out.println("(CHAR ---> " +  image + ")");} //55
    | <ERRORES : ~[]>
}





//----------------------------------------FIN DECLARACION TOKENS -------------------------------------------------------
//----------------------------------------INICIO DECLARACION GRAMATICAS -------------------------------------------------------


    
//----------------------------------------PROGRAMA PRINCIPAL -------------------------------------------------------
    void Programa() :{}
    {
        //try{
            <MAIN><PARI><PARD><LLAVEI> Bloque() <LLAVED><EOF>
        /*}catch(ParseException e){
        error_skipto(EOF);
        }catch(TokenMgrError a){
        error_skipto(EOF);
        }*/
    }
    



//----------------------------------------BLOQUE DE SENTENCIAS -------------------------------------------------------
    void Bloque() : {}
    {
       
        (
            sentencia()
        )*  
        
        
    }



//----------------------------------------SENTENCIAS -------------------------------------------------------
    void sentencia() : {}
    {
        imprimir()
        | LOOKAHEAD(5)declaraciones()
        | LOOKAHEAD(5)asignaciones()
        | LOOKAHEAD(5)incrementoDecremento()
        | condicionalIf()
        | cicloFor()
        | cicloWhile()
        | leer()
        | LOOKAHEAD(5)declaracionAritmetica()
        | LOOKAHEAD(5)asignacionAritmetica()
    }

//---------------------------------------- IMPRIMIR -------------------------------------------------------
    void imprimir() :{}
    {
    //try{
        <WRITE><PARI>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>)<PARD><DELIMITER> 
    //}catch(ParseException e){
    //error_skipto(DELIMITER);
    //}
}



//---------------------------------------- DECLARACIONES -------------------------------------------------------
    void declaraciones() : 
    {}
    {   
        //TIPO DE DATO
        (<INT>|<CARACTER>|<FLOAT>|<STRING>|<BOOL>)
        
        //IDENTIFICADOR
        <IDENTIFICADOR>
        
        //SIMBOLO =
        ((<ASIGNACION>

        //VALOR
        (<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>))

        |
        //Lo mismo pero con las comas
        (<COMA><IDENTIFICADOR><ASIGNACION>
        (<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>)))*

        //DELIMITADOR;
        <DELIMITER>
    }


//---------------------------------------- DECLARACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
    void declaracionAritmetica() : {}
    {

        //TIPO DE DATO
        (<INT>|<CARACTER>|<FLOAT>|<STRING>|<BOOL>)
        
        //IDENTIFICADOR
        <IDENTIFICADOR>
        
        //SIMBOLO =
        ((<ASIGNACION>operacion()<DELIMITER>))
    }

//----------------------------------------OPERACIONES ARITMETICAS-------------------------------------------------------
    void operacion() : {}
    {
        <NUMERO>((<MAS>|<MENOS>|<MULTIPLICAR>|<DIVIDIR>|<MODULO>)<NUMERO>)*
    }


//---------------------------------------- ASIGNACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
    void asignacionAritmetica() : {}
    {
        <IDENTIFICADOR>(<ASIGNACION>|<SUMAIGUAL>|<RESTAIGUAL>|<MULTIGUAL>|<DIVIDIRIGUAL>|<MODULOIGUAL>)operacion()<DELIMITER>
    }


//----------------------------------------GRAMATICAS INCREMENTO O DECREMENTO -------------------------------------------------------
    void incrementoDecremento() : {}
    {
        //OPERANDO
        (<IDENTIFICADOR>)

        //OPERADOR
        (<INCR>|<DECR>)

        //DELIMITADOR
        <DELIMITER>
    }

//----------------------------------------ASIGNACIONES NORMALES -------------------------------------------------------
    void asignaciones() : {}
    {
        //DESTINO
        <IDENTIFICADOR>
    
        //OPERADOR DE ASIGNACION
        (LOOKAHEAD(3)((<ASIGNACION>|<SUMAIGUAL>|<RESTAIGUAL>|<MULTIGUAL>|<DIVIDIRIGUAL>|<MODULOIGUAL>)

        //VALOR DE LA ASIGNACION
        (<IDENTIFICADOR>|<CHAR>|<CADENA>|<NUMERO>|<TRUE>|<FALSE>|<DECIMAL>))

        |
        //LOOKAHEAD(3)
        ((<ASIGNACION>|<SUMAIGUAL>|<RESTAIGUAL>|<MULTIGUAL>|<DIVIDIRIGUAL>|<MODULOIGUAL>)
        (<NUMERO>(<MAS>)<NUMERO>)))

        //DELIMITADOR
        <DELIMITER>
    }


//----------------------------------------COMPARACION LOGICA -------------------------------------------------------
    void comparacionLogica() : {}
    {
        //PRIMER TERMINO DEL IF
        ((<NEGACION>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))|<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>)

        //OPERADOR
        ((<IGUALDAD> | <MAYOR> | <MAYORI> | <MENOR> | <MENORI>
        | <DIFERENCIA> | <AND> | <OR>
        )

        //SEGUNDO TERMINO
        ((<NEGACION>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))|<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))*
    }


//----------------------------------------ESTRUCTURA CONDICIONAL IF -------------------------------------------------------
    void condicionalIf() :    {}
    {
        <IF><PARI>comparacionLogica()<PARD><LLAVEI>(imprimir()|declaraciones())*<LLAVED>

        //ELSEIF
        (LOOKAHEAD(2)(<ELSE><IF><PARI>comparacionLogica()<PARD><LLAVEI>(imprimir()|declaraciones())*<LLAVED>))*
        (LOOKAHEAD(2)(<ELSE><LLAVEI>(imprimir()|declaraciones())*<LLAVED>))*
    }

//---------------------------------------- ESTRUCTURA CICLO FOR -------------------------------------------------------
    void cicloFor() : {}
    {
        try{
            <FOR><PARI><IDENTIFICADOR><ASIGNACION><NUMERO><DELIMITER><IDENTIFICADOR>
    
            //OPERADOR LOGICO
            (<MENOR>|<MAYOR>|<MENORI>|<MAYORI>|<IGUALDAD>|<DIFERENCIA>)(<NUMERO>|<IDENTIFICADOR>)<DELIMITER>

            //PASO
            <IDENTIFICADOR>(<INCR>|<DECR>)
            <PARD><LLAVEI>(imprimir()|declaraciones())*(<BREAK><DELIMITER>)*<LLAVED>
        }catch(ParseException e){
            System.out.println("\nError Sintactico (PROGRAMA) ");
        }
    }


//----------------------------------------ESTRUCTURA CICLO WHILE -------------------------------------------------------
    void cicloWhile() : {}
    {
        <WHILE><PARI>comparacionLogica()<PARD><LLAVEI>(sentencia())*(<BREAK><DELIMITER>)*<LLAVED>
    }

//----------------------------------------LEER DATOS DESDE TECLADO -------------------------------------------------------
    void leer() : {}
    {
        <READ><PARI><IDENTIFICADOR><PARD><DELIMITER>
    }


