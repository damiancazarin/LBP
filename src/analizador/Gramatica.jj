options{
    
    LOOKAHEAD=1;
}


PARSER_BEGIN(Gramatica)
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;

class Gramatica{

    public static void main(String[] args )  throws ParseException, FileNotFoundException {
    Scanner entrada = new Scanner(System.in);
    //System.out.println("Ingresa el nombre del archivo que quieres ejecutar");
    //String str = entrada.next();
        try{
            Gramatica analizador = new Gramatica(new BufferedReader(new FileReader("entrada1" + ".txt")));
            analizador.Programa(); 
            System.out.println("\tEjecucion finalizada");
        }
        
        catch(ParseException e){
            
            System.out.println(e.getMessage());
            System.out.println("\tEjecucion finalizada");
        }
    }
}


PARSER_END (Gramatica)


//OPERADORES ARITMETICOS
TOKEN : 
{
    <ASIGNACION : "=">  {System.out.println("(OP_Asignacion ---> " +  image + ")");}        //1
    |<MAS : "+">        {System.out.println("(OP_Mas ---> " +  image + ")");}        //2
    |<MENOS : "-">      {System.out.println("(OP_Menos ---> " +  image + ")");}        //3
    |<MULTIPLICAR : "*">{System.out.println("(OP_Multiplicar ---> " +  image + ")");}        //4 
    |<DIVIDIR : "/">    {System.out.println("(OP_Division --->" +  image + ")");}        //5
    |<INCR : "++">      {System.out.println("(OP_Incremento ---> " +  image + ")");}        //6
    |<DECR : "--">      {System.out.println("(OP_Decremento ---> " +  image + ")");}        //7
    |<MODULO : "%">        {System.out.println("(OP_Modulo ---> " +  image + ")");}     //8
    |<SUMAIGUAL : "+=">    {System.out.println("(OP_SumaAsignacion ---> " +  image + ")");}     //9
    |<RESTAIGUAL : "-=">   {System.out.println("(OP_RestaAsignacion ---> " +  image + ")");}     //10
    |<MULTIGUAL : "*=">    {System.out.println("(OP_MultiplicacionAsignacion ---> " +  image + ")");}     //11
    |<DIVIDIRIGUAL : "/="> {System.out.println("(OP_DividirAsignacion ---> " +  image + ")");}     //12
    |<MODULOIGUAL : "%=">  {System.out.println("(OP_ModuloAsignacion ---> " +  image + ")");}     //13
}

//PALABRAS RESERVADAS
TOKEN : 
{
    //<VOID : "vacio">          {System.out.println("(PR_VOID ---> " +  image + ")");}  //14
     <MAIN : "principal">    {System.out.println("(PR_MAIN ---> " +  image + ")");}  //15
    | <WRITE : "imprimir">    {System.out.println("(PR_IMPRIMIR ---> " +  image + ")");}  //16
    | <READ : "leer">         {System.out.println("(PR_LEER ---> " +  image + ")");}  //17
    | <IF : "cuando">         {System.out.println("(PR_IF ---> " +  image + ")");}  //18
    | <ELSE : "sino">           {System.out.println("(PR_ELSE ---> " +  image + ")");}//19
    //| <ELSEIF : "sino_cuando">  {System.out.println("(PR_ELSEIF ---> " +  image + ")");}//20
    //| <RETURN : "retorno">      {System.out.println("(PR_RETURN ---> " +  image + ")");}//21
    | <BREAK : "romper">        {System.out.println("(PR_BREAK ---> " +  image + ")");}//22
    | <FOR : "ciclo_for">       {System.out.println("(PR_FOR ---> " +  image + ")");}//23
    | <WHILE : "ciclo_mientras">{System.out.println("(PR_WHILE ---> " +  image + ")");}//24
}

//CARACTERES ESPECIALES
TOKEN :
{
    <PARI : "(">                {System.out.println("(CE_PARENTESISIZQ ---> " +  image + ")");}//25
    | <PARD : ")">              {System.out.println("(CE_PARENTESISDER ---> \"" +  image + "\")");}//26
    | <LLAVEI : "{">            {System.out.println("(CE_LLAVEIZQ ---> \"" +  image + "\")");}//27
    | <LLAVED : "}">            {System.out.println("(CE_LLAVEDER ---> " +  image + ")");}//28
    | <DELIMITER : ";">         {System.out.println("(CE_DELIMITADOR ---> " +  image + ")");}//29
    | <COMA : ",">              {System.out.println("(CE_COMA ---> " +  image + ")");}//30
    | <COMILLA : "\"">          {System.out.println("(CE_COMILLA ---> " +  image + ")");}//31
    | <COMENTARIO : "#">        {System.out.println("(CE_COMENTARIO ---> " +  image + ")");}//32
    | <PUNTO : ".">             {System.out.println("(CE_PUNTO ---> " +  image + ")");}//33
}


//OPERADORES LOGICOS
TOKEN : 
{
    <IGUALDAD : "==">           {System.out.println("(OPL_IGUALDAD ---> " +  image + ")");}//34
    | <MAYOR : ">">             {System.out.println("(OPL_MAYORQUE ---> " +  image + ")");}//35
    | <MAYORI : ">=">           {System.out.println("(OPL_MAYORIGUAL ---> " +  image + ")");}//36
    | <MENOR : "<">             {System.out.println("(OPL_MENORQUE ---> " +  image + ")");}//37
    | <MENORI : "<=">           {System.out.println("(OPL_MENORIGUAL ---> " +  image + ")");}//38
    | <DIFERENCIA : "!=">       {System.out.println("(OPL_DIFERENCIA ---> " +  image + ")");}//39
    | <NEGACION : "!">          {System.out.println("(OPL_NEGACION ---> " +  image + ")");}//40
    | <AND : "&&">              {System.out.println("(OPL_AND ---> " +  image + ")");}//41
    | <OR : "||">               {System.out.println("(OPL_OR ---> " +  image + ")");}//42
}


    //VALORES PREDETERMINADOS
    TOKEN : 
    {
        <TRUE : "verdadero">        {System.out.println("(VP_TRUE ---> " +  image + ")");}//43
        |<FALSE : "falso">           {System.out.println("(VP_FALSE ---> " +  image + ")");}//44
        |<NULL  : "nulo">            {System.out.println("(VP_NULL ---> " +  image + ")");}//45
    }




//TIPOS DE DATOS
TOKEN :
{
    <INT : "entero">            {System.out.println("(TD_INT ---> " +  image + ")");}//46
    | <FLOAT : "flotante">      {System.out.println("(TD_FLOAT ---> " +  image + ")");}//47
    | <STRING : "cadena">       {System.out.println("(TD_STRING ---> " +  image + ")");}//48
    | <BOOL : "bool">           {System.out.println("(TD_BOOLEAN ---> " +  image + ")");}//49
    | <CARACTER : "caracter">   {System.out.println("(TD_CHAR ---> " +  image + ")");}    //50
    | <NUMERO : (["0" - "9"])+>         {System.out.println("(NUMBER ---> " +  image + ")");}//51
    | <IDENTIFICADOR :  ["a" - "z", "A" - "Z"](["a" - "z", "A" - "Z", "0" - "9", "_"])*>   {System.out.println("(IDENTIFICADOR ---> " +  image + ")");} //52
    | <DECIMAL : (["0" - "9"])+["."](["0" - "9"])+>                 {System.out.println("(DECIMAL ---> " +  image + ")");}//53
    | <CADENA : "\""(~["\""])*"\"" > {System.out.println("(STRING ---> " +  image + ")");} //54
    | <CHAR : "\'"(~["\""])"\'" >     {System.out.println("(CHAR ---> " +  image + ")");} //55
    | <DOSPUNTOS : ":">    {System.out.println("(DOSPUNTOS ---> " +  image + ")");} //56  
}



SKIP : 
{
    " " | "\n" | "\r" | "\r\n" | "\t" 
}


//----------------------------------------FIN DECLARACION TOKENS -------------------------------------------------------
//----------------------------------------INICIO DECLARACION GRAMATICAS -------------------------------------------------------


    
//----------------------------------------PROGRAMA PRINCIPAL -------------------------------------------------------
    void Programa() :{}
    {
        try{
            <MAIN><PARI><PARD><LLAVEI> Bloque() <LLAVED><EOF>
        }catch(ParseException e){
            System.out.println("\nError Sintactico (PROGRAMA) ");
            Token currentToken = e.currentToken;
            int [][]expectedTokenSequences = e.expectedTokenSequences;
            String[] tokenImage = e.tokenImage;
            String eol = System.getProperty("line.separator", "\n");

            StringBuffer expected = new StringBuffer();
            int maxSize = 0;
            for (int i = 0; i < expectedTokenSequences.length; i++) {
                if (maxSize < expectedTokenSequences[i].length) {
                    maxSize = expectedTokenSequences[i].length;
                }
                for (int j = 0; j < expectedTokenSequences[i].length; j++) {
                    expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
                }
                if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
                    expected.append("...");
                }
                expected.append(eol).append("    ");
            }
            String retval = "Se encontro \"";
            Token tok = currentToken.next;
            for (int i = 0; i < maxSize; i++) {
                if (i != 0) retval += " ";
                if (tok.kind == 0) {
                    retval += tokenImage[0];
                    break;
                }
                retval += " " + tokenImage[tok.kind];
                retval += " \"";
                //retval += add_escapes(tok.image);
                //retval += " \"";
                tok = tok.next; 
            }
            retval += "\" en la linea " + currentToken.next.beginLine + ", columna " + currentToken.next.beginColumn;
            retval += "." + eol;
            if (expectedTokenSequences.length == 1) {
                retval += "Se esperaba:" + eol + "    ";
            } else {
                retval += "Se esperaba alguno de estos:" + eol + "    ";
            }
            retval += expected.toString();
            System.out.println(retval);
        }
    }



//----------------------------------------BLOQUE DE SENTENCIAS -------------------------------------------------------
    void Bloque() : {}
    {
        try{
        (
            sentencia()
        )*  
        }catch(ParseException e){
            System.out.println("\nError Sintactico (BLOQUE) en linea " 
            + e.currentToken.next.beginLine + ", columna  " + e.currentToken.next.beginColumn);
        }catch(TokenMgrError a){
            System.out.println("\nError Lexico en linea " + token.endLine  + ", columna  " + token.endColumn + 
            ".\n El token  \"" + token.image + 
            "\" no es reconocido por el lenguaje");
        }
    }



//----------------------------------------SENTENCIAS -------------------------------------------------------
    void sentencia() : {}
    {
        imprimir()
        | LOOKAHEAD(5)declaraciones()
        | LOOKAHEAD(5)asignaciones()
        | LOOKAHEAD(5)incrementoDecremento()
        | condicionalIf()
        | cicloFor()
        | cicloWhile()
        | leer()
        | LOOKAHEAD(5)declaracionAritmetica()
        | LOOKAHEAD(5)asignacionAritmetica()
    }

//---------------------------------------- IMPRIMIR -------------------------------------------------------
    void imprimir() :{}
    {
        <WRITE><PARI>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>)<PARD><DELIMITER> 
    }


//---------------------------------------- DECLARACIONES -------------------------------------------------------
    void declaraciones() : 
    {}
    {   
        //TIPO DE DATO
        (<INT>|<CARACTER>|<FLOAT>|<STRING>|<BOOL>)
        
        //IDENTIFICADOR
        <IDENTIFICADOR>
        
        //SIMBOLO =
        ((<ASIGNACION>

        //VALOR
        (<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>))

        |
        //Lo mismo pero con las comas
        (<COMA><IDENTIFICADOR><ASIGNACION>
        (<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>)))*

        //DELIMITADOR;
        <DELIMITER>
    }


//---------------------------------------- DECLARACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
    void declaracionAritmetica() : {}
    {

        //TIPO DE DATO
        (<INT>|<CARACTER>|<FLOAT>|<STRING>|<BOOL>)
        
        //IDENTIFICADOR
        <IDENTIFICADOR>
        
        //SIMBOLO =
        ((<ASIGNACION>operacion()<DELIMITER>))
    }

//----------------------------------------OPERACIONES ARITMETICAS-------------------------------------------------------
    void operacion() : {}
    {
        <NUMERO>((<MAS>|<MENOS>|<MULTIPLICAR>|<DIVIDIR>|<MODULO>)<NUMERO>)*
    }


//---------------------------------------- ASIGNACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
    void asignacionAritmetica() : {}
    {
        <IDENTIFICADOR>(<ASIGNACION>|<SUMAIGUAL>|<RESTAIGUAL>|<MULTIGUAL>|<DIVIDIRIGUAL>|<MODULOIGUAL>)operacion()<DELIMITER>
    }


//----------------------------------------GRAMATICAS INCREMENTO O DECREMENTO -------------------------------------------------------
    void incrementoDecremento() : {}
    {
        //OPERANDO
        (<IDENTIFICADOR>)

        //OPERADOR
        (<INCR>|<DECR>)

        //DELIMITADOR
        <DELIMITER>
    }

//----------------------------------------ASIGNACIONES NORMALES -------------------------------------------------------
    void asignaciones() : {}
    {
        //DESTINO
        <IDENTIFICADOR>
    
        //OPERADOR DE ASIGNACION
        (LOOKAHEAD(3)((<ASIGNACION>|<SUMAIGUAL>|<RESTAIGUAL>|<MULTIGUAL>|<DIVIDIRIGUAL>|<MODULOIGUAL>)

        //VALOR DE LA ASIGNACION
        (<IDENTIFICADOR>|<CHAR>|<CADENA>|<NUMERO>|<TRUE>|<FALSE>|<DECIMAL>))

        |
        //LOOKAHEAD(3)
        ((<ASIGNACION>|<SUMAIGUAL>|<RESTAIGUAL>|<MULTIGUAL>|<DIVIDIRIGUAL>|<MODULOIGUAL>)
        (<NUMERO>(<MAS>)<NUMERO>)))

        //DELIMITADOR
        <DELIMITER>
    }


//----------------------------------------COMPARACION LOGICA -------------------------------------------------------
    void comparacionLogica() : {}
    {
        //PRIMER TERMINO DEL IF
        ((<NEGACION>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))|<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>)

        //OPERADOR
        ((<IGUALDAD> | <MAYOR> | <MAYORI> | <MENOR> | <MENORI>
        | <DIFERENCIA> | <AND> | <OR>
        )

        //SEGUNDO TERMINO
        ((<NEGACION>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))|<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))*
    }


//----------------------------------------ESTRUCTURA CONDICIONAL IF -------------------------------------------------------
    void condicionalIf() :    {}
    {
        <IF><PARI>comparacionLogica()<PARD><LLAVEI>(imprimir()|declaraciones())*<LLAVED>

        //ELSEIF
        (LOOKAHEAD(2)(<ELSE><IF><PARI>comparacionLogica()<PARD><LLAVEI>(imprimir()|declaraciones())*<LLAVED>))*
        (LOOKAHEAD(2)(<ELSE><LLAVEI>(imprimir()|declaraciones())*<LLAVED>))*
    }

//---------------------------------------- ESTRUCTURA CICLO FOR -------------------------------------------------------
    void cicloFor() : {}
    {
        try{
            <FOR><PARI><IDENTIFICADOR><ASIGNACION><NUMERO><DELIMITER><IDENTIFICADOR>
    
            //OPERADOR LOGICO
            (<MENOR>|<MAYOR>|<MENORI>|<MAYORI>|<IGUALDAD>|<DIFERENCIA>)(<NUMERO>|<IDENTIFICADOR>)<DELIMITER>

            //PASO
            <IDENTIFICADOR>(<INCR>|<DECR>)
            <PARD><LLAVEI>(imprimir()|declaraciones())*(<BREAK><DELIMITER>)*<LLAVED>
        }catch(ParseException e){
            System.out.println("\nError Sintactico (PROGRAMA) ");
        }
    }


//----------------------------------------ESTRUCTURA CICLO WHILE -------------------------------------------------------
    void cicloWhile() : {}
    {
        <WHILE><PARI>comparacionLogica()<PARD><LLAVEI>(sentencia())*(<BREAK><DELIMITER>)*<LLAVED>
    }

//----------------------------------------LEER DATOS DESDE TECLADO -------------------------------------------------------
    void leer() : {}
    {
        <READ><PARI><IDENTIFICADOR><PARD><DELIMITER>
    }
