/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;
import java.io.Reader;

class Gramatica implements GramaticaConstants {

  static int numeroErrores = 0;
        static boolean flag = false;
        public static void main(String[] args) throws ParseException{
                try{
                Gramatica analizador = new Gramatica(new BufferedReader(new FileReader("entrada2" + ".txt")));


                String salidaError = "";
                salidaError = analizador.Inicio(salidaError);
                if(salidaError==""){
                        System.out.println("Analizador: Todo correcto!");
                }else{
                        System.out.println("Analizador: Se han encontrado errores en el analisis");
                        System.out.println("Numero de erroress: "+numeroErrores);
                        System.out.println(salidaError);
                    }
                }catch(FileNotFoundException e){
                System.out.println("nomeimporta");
                }
        }

        private static String salidaError(Token currentToken, int[][] expectedTokenSequences, String[] tokenImage, String tipo){
                String eol = System.getProperty("line.separator", "\n");
                StringBuffer expected = new StringBuffer();
                int maxSize = 0;
                String retval = "";
                for (int i = 0; i < expectedTokenSequences.length; i++) {
                        if (maxSize < expectedTokenSequences[i].length) {
                                maxSize = expectedTokenSequences[i].length;
                        }
                        for (int j = 0; j < expectedTokenSequences[i].length; j++) {
                                expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
                        }
                        if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
                                expected.append("...");
                        }
                        expected.append(eol).append("    ");
                }

                if(tipo.equals("sintactico")){
                        numeroErrores++;
                        retval += "Analizador: Ha ocurrido un error sintactico\n";
                        retval += "Se encontro: ";
                        Token tok = currentToken.next;
                        for (int i = 0; i < maxSize; i++) {
                                if (i != 0){
                                retval += " ";
                                }
                                if (tok.kind == 0) {
                                        retval += tokenImage[0];
                                        break;
                                }
                                retval += " " + tokenImage[tok.kind];
                                tok = tok.next;
                        }
                        //int linea = currentToken.next.beginLine + 1;
                        retval += " en la linea: " + currentToken.next.beginLine + ", columna: " + currentToken.next.beginColumn;
                        retval += eol;
                        if (expectedTokenSequences.length == 1) {
                                retval += "Esperaba: " + eol + "    ";
                        } else {
                                retval += "Esperaba uno de estos:" + eol + "    ";
                        }
                                retval += expected.toString();
                        return retval;
                }
                if(tipo.equals("lexico")){
                        numeroErrores++;
                        retval +="Analizador: Ha ocurrido un error lexico\n";
                        retval += "Se encontro: ";
                        Token tok = currentToken.next;
                        for (int i = 0; i < maxSize; i++) {
                                if (i != 0){
                                        retval += " ";
                                }
                                if (tok.kind == 0) {
                                        retval += tokenImage[0];
                                        break;
                                }
                                retval += add_escapes(tok.image);
                                tok = tok.next;
                        }
                        retval += " en la linea: " + currentToken.next.beginLine + ", columna: " + currentToken.next.beginColumn;
                        retval += eol;
                        return retval;
                }
                return "";
        }

        private String Inicio(String err){
                try{
                        if(flag == true){
                                Bloque();
                        }else if(flag == false){
                                Programa();
                        }
                }catch(ParseException e){
                        boolean errorLexico = true;
                        flag = true;

                        for(int i=0;i<tokenImage.length;i++){
                                if(tokenImage[e.currentToken.next.kind]==tokenImage[i]&&tokenImage[e.currentToken.next.kind]!=tokenImage[ERRORES]){
                                        errorLexico=false;
                                }
                        }

                        Token t=e.currentToken;
                        while(t!=null && t.next!=null){
                                t = getNextToken();
                                if(t.next==null){
                                        break;
                                }
                        }

                        if(errorLexico){
                                err +=salidaError(e.currentToken, e.expectedTokenSequences, e.tokenImage, "lexico");
                        }else{
                                err +=salidaError(e.currentToken, e.expectedTokenSequences, e.tokenImage, "sintactico");
                        }

                        if(token.kind != EOF){
                                err=Inicio(err);
                        }
                }catch(TokenMgrError ex){
                        err +=ex.getMessage();
                }
                return err;
        }


      static String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }

//----------------------------------------FIN DECLARACION TOKENS -------------------------------------------------------
//----------------------------------------INICIO DECLARACION GRAMATICAS -------------------------------------------------------



//----------------------------------------PROGRAMA PRINCIPAL -------------------------------------------------------
  static final public void Programa() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(PARI);
    jj_consume_token(PARD);
    jj_consume_token(LLAVEI);
    Bloque();
    jj_consume_token(LLAVED);
    jj_consume_token(0);
  }

//----------------------------------------BLOQUE DE SENTENCIAS -------------------------------------------------------
  static final public void Bloque() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WRITE:
      case READ:
      case IF:
      case FOR:
      case WHILE:
      case INT:
      case FLOAT:
      case STRING:
      case BOOL:
      case CARACTER:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      sentencia();
    }
  }

//----------------------------------------SENTENCIAS -------------------------------------------------------
  static final public void sentencia() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WRITE:
      imprimir();
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(5)) {
        declaraciones();
      } else if (jj_2_2(5)) {
        asignaciones();
      } else if (jj_2_3(5)) {
        incrementoDecremento();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          condicionalIf();
          break;
        case FOR:
          cicloFor();
          break;
        case WHILE:
          cicloWhile();
          break;
        case READ:
          leer();
          break;
        default:
          jj_la1[2] = jj_gen;
          if (jj_2_4(5)) {
            declaracionAritmetica();
          } else if (jj_2_5(5)) {
            asignacionAritmetica();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

//---------------------------------------- IMPRIMIR -------------------------------------------------------
  static final public void imprimir() throws ParseException {
    jj_consume_token(WRITE);
    jj_consume_token(PARI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case NULL:
      jj_consume_token(NULL);
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARD);
    jj_consume_token(DELIMITER);
  }

//---------------------------------------- DECLARACIONES -------------------------------------------------------
  static final public void declaraciones() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case CARACTER:
      jj_consume_token(CARACTER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFICADOR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
      case COMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
          break;
        case NUMERO:
          jj_consume_token(NUMERO);
          break;
        case DECIMAL:
          jj_consume_token(DECIMAL);
          break;
        case TRUE:
          jj_consume_token(TRUE);
          break;
        case FALSE:
          jj_consume_token(FALSE);
          break;
        case NULL:
          jj_consume_token(NULL);
          break;
        case CADENA:
          jj_consume_token(CADENA);
          break;
        case CHAR:
          jj_consume_token(CHAR);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case COMA:
        jj_consume_token(COMA);
        jj_consume_token(IDENTIFICADOR);
        jj_consume_token(ASIGNACION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
          break;
        case NUMERO:
          jj_consume_token(NUMERO);
          break;
        case DECIMAL:
          jj_consume_token(DECIMAL);
          break;
        case TRUE:
          jj_consume_token(TRUE);
          break;
        case FALSE:
          jj_consume_token(FALSE);
          break;
        case NULL:
          jj_consume_token(NULL);
          break;
        case CADENA:
          jj_consume_token(CADENA);
          break;
        case CHAR:
          jj_consume_token(CHAR);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(DELIMITER);
  }

//---------------------------------------- DECLARACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
  static final public void declaracionAritmetica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case CARACTER:
      jj_consume_token(CARACTER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ASIGNACION);
    operacion();
    jj_consume_token(DELIMITER);
  }

//----------------------------------------OPERACIONES ARITMETICAS-------------------------------------------------------
  static final public void operacion() throws ParseException {
    jj_consume_token(NUMERO);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
      case MULTIPLICAR:
      case DIVIDIR:
      case MODULO:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        break;
      case MULTIPLICAR:
        jj_consume_token(MULTIPLICAR);
        break;
      case DIVIDIR:
        jj_consume_token(DIVIDIR);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(NUMERO);
    }
  }

//---------------------------------------- ASIGNACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
  static final public void asignacionAritmetica() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      jj_consume_token(ASIGNACION);
      break;
    case SUMAIGUAL:
      jj_consume_token(SUMAIGUAL);
      break;
    case RESTAIGUAL:
      jj_consume_token(RESTAIGUAL);
      break;
    case MULTIGUAL:
      jj_consume_token(MULTIGUAL);
      break;
    case DIVIDIRIGUAL:
      jj_consume_token(DIVIDIRIGUAL);
      break;
    case MODULOIGUAL:
      jj_consume_token(MODULOIGUAL);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    operacion();
    jj_consume_token(DELIMITER);
  }

//----------------------------------------GRAMATICAS INCREMENTO O DECREMENTO -------------------------------------------------------
  static final public void incrementoDecremento() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      jj_consume_token(INCR);
      break;
    case DECR:
      jj_consume_token(DECR);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DELIMITER);
  }

//----------------------------------------ASIGNACIONES NORMALES -------------------------------------------------------
  static final public void asignaciones() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    if (jj_2_6(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        break;
      case SUMAIGUAL:
        jj_consume_token(SUMAIGUAL);
        break;
      case RESTAIGUAL:
        jj_consume_token(RESTAIGUAL);
        break;
      case MULTIGUAL:
        jj_consume_token(MULTIGUAL);
        break;
      case DIVIDIRIGUAL:
        jj_consume_token(DIVIDIRIGUAL);
        break;
      case MODULOIGUAL:
        jj_consume_token(MODULOIGUAL);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case CADENA:
        jj_consume_token(CADENA);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case DECIMAL:
        jj_consume_token(DECIMAL);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
      case SUMAIGUAL:
      case RESTAIGUAL:
      case MULTIGUAL:
      case DIVIDIRIGUAL:
      case MODULOIGUAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASIGNACION:
          jj_consume_token(ASIGNACION);
          break;
        case SUMAIGUAL:
          jj_consume_token(SUMAIGUAL);
          break;
        case RESTAIGUAL:
          jj_consume_token(RESTAIGUAL);
          break;
        case MULTIGUAL:
          jj_consume_token(MULTIGUAL);
          break;
        case DIVIDIRIGUAL:
          jj_consume_token(DIVIDIRIGUAL);
          break;
        case MODULOIGUAL:
          jj_consume_token(MODULOIGUAL);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(NUMERO);
        jj_consume_token(MAS);
        jj_consume_token(NUMERO);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(DELIMITER);
  }

//----------------------------------------COMPARACION LOGICA -------------------------------------------------------
  static final public void comparacionLogica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGACION:
      jj_consume_token(NEGACION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case DECIMAL:
        jj_consume_token(DECIMAL);
        break;
      case CADENA:
        jj_consume_token(CADENA);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALDAD:
      case MAYOR:
      case MAYORI:
      case MENOR:
      case MENORI:
      case DIFERENCIA:
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALDAD:
        jj_consume_token(IGUALDAD);
        break;
      case MAYOR:
        jj_consume_token(MAYOR);
        break;
      case MAYORI:
        jj_consume_token(MAYORI);
        break;
      case MENOR:
        jj_consume_token(MENOR);
        break;
      case MENORI:
        jj_consume_token(MENORI);
        break;
      case DIFERENCIA:
        jj_consume_token(DIFERENCIA);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGACION:
        jj_consume_token(NEGACION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
          break;
        case NUMERO:
          jj_consume_token(NUMERO);
          break;
        case DECIMAL:
          jj_consume_token(DECIMAL);
          break;
        case CADENA:
          jj_consume_token(CADENA);
          break;
        case CHAR:
          jj_consume_token(CHAR);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case DECIMAL:
        jj_consume_token(DECIMAL);
        break;
      case CADENA:
        jj_consume_token(CADENA);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//----------------------------------------ESTRUCTURA CONDICIONAL IF -------------------------------------------------------
  static final public void condicionalIf() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PARI);
    comparacionLogica();
    jj_consume_token(PARD);
    jj_consume_token(LLAVEI);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WRITE:
      case INT:
      case FLOAT:
      case STRING:
      case BOOL:
      case CARACTER:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WRITE:
        imprimir();
        break;
      case INT:
      case FLOAT:
      case STRING:
      case BOOL:
      case CARACTER:
        declaraciones();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(LLAVED);
    label_6:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      jj_consume_token(PARI);
      comparacionLogica();
      jj_consume_token(PARD);
      jj_consume_token(LLAVEI);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WRITE:
        case INT:
        case FLOAT:
        case STRING:
        case BOOL:
        case CARACTER:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WRITE:
          imprimir();
          break;
        case INT:
        case FLOAT:
        case STRING:
        case BOOL:
        case CARACTER:
          declaraciones();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(LLAVED);
    }
    label_8:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(ELSE);
      jj_consume_token(LLAVEI);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WRITE:
        case INT:
        case FLOAT:
        case STRING:
        case BOOL:
        case CARACTER:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WRITE:
          imprimir();
          break;
        case INT:
        case FLOAT:
        case STRING:
        case BOOL:
        case CARACTER:
          declaraciones();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(LLAVED);
    }
  }

//---------------------------------------- ESTRUCTURA CICLO FOR -------------------------------------------------------
  static final public void cicloFor() throws ParseException {
    try {
      jj_consume_token(FOR);
      jj_consume_token(PARI);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ASIGNACION);
      jj_consume_token(NUMERO);
      jj_consume_token(DELIMITER);
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        jj_consume_token(MENOR);
        break;
      case MAYOR:
        jj_consume_token(MAYOR);
        break;
      case MENORI:
        jj_consume_token(MENORI);
        break;
      case MAYORI:
        jj_consume_token(MAYORI);
        break;
      case IGUALDAD:
        jj_consume_token(IGUALDAD);
        break;
      case DIFERENCIA:
        jj_consume_token(DIFERENCIA);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DELIMITER);
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PARD);
      jj_consume_token(LLAVEI);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WRITE:
        case INT:
        case FLOAT:
        case STRING:
        case BOOL:
        case CARACTER:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WRITE:
          imprimir();
          break;
        case INT:
        case FLOAT:
        case STRING:
        case BOOL:
        case CARACTER:
          declaraciones();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_11;
        }
        jj_consume_token(BREAK);
        jj_consume_token(DELIMITER);
      }
      jj_consume_token(LLAVED);
    } catch (ParseException e) {
            System.out.println("\nError Sintactico (PROGRAMA) ");
    }
  }

//----------------------------------------ESTRUCTURA CICLO WHILE -------------------------------------------------------
  static final public void cicloWhile() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(PARI);
    comparacionLogica();
    jj_consume_token(PARD);
    jj_consume_token(LLAVEI);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WRITE:
      case READ:
      case IF:
      case FOR:
      case WHILE:
      case INT:
      case FLOAT:
      case STRING:
      case BOOL:
      case CARACTER:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_12;
      }
      sentencia();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_13;
      }
      jj_consume_token(BREAK);
      jj_consume_token(DELIMITER);
    }
    jj_consume_token(LLAVED);
  }

//----------------------------------------LEER DATOS DESDE TECLADO -------------------------------------------------------
  static final public void leer() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(PARI);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARD);
    jj_consume_token(DELIMITER);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(NUMERO)) return true;
    if (jj_scan_token(MAS)) return true;
    if (jj_scan_token(NUMERO)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    if (jj_scan_token(DELIMITER)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    if (jj_scan_token(DELIMITER)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    if (jj_scan_token(NUMERO)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_21()) return true;
    if (jj_scan_token(DELIMITER)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(NUMERO)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    }
    }
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(ASIGNACION)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(DELIMITER)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(COMA)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(ASIGNACION)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(LLAVEI)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(ASIGNACION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    }
    }
    if (jj_scan_token(IDENTIFICADOR)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DELIMITER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GramaticaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6700000,0x100000,0x6600000,0x0,0x0,0x40,0x0,0x0,0x40,0x0,0x2780,0x2780,0x7c040,0x1800,0x7c040,0x0,0x7c040,0x7c040,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x100000,0x100000,0x100000,0x0,0x0,0x1800,0x100000,0x100000,0x1000000,0x6700000,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2f8000,0x0,0x0,0x1f07000,0xf8000,0x1,0x1f07000,0x1f07000,0x1,0xf8000,0x0,0x0,0x0,0x0,0x0,0x1f03000,0x0,0x0,0x1f00000,0x1f00200,0xdf8,0xdf8,0x1f00000,0x1f00200,0xf8000,0xf8000,0xf8000,0xf8000,0xf8000,0xf8000,0x1f8,0x300000,0x0,0xf8000,0xf8000,0x0,0x2f8000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
