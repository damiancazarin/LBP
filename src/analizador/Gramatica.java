/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;

class Gramatica implements GramaticaConstants {

    public static void main(String[] args )  throws ParseException, FileNotFoundException {

        try{
            Gramatica analizador = new Gramatica(new BufferedReader(new FileReader("./entrada.txt")));
            analizador.Programa();
            System.out.println("\tAnalizador ha terminado");
        }

        catch(ParseException e){

            System.out.println(e.getMessage());
            System.out.println("\tAnalizador ha terminado");
        }
    }

  static final public void Programa() throws ParseException {
    Bloque();
  }

  static final public void Bloque() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
      case MAS:
      case MENOS:
      case MULTIPLICAR:
      case DIVIDIR:
      case INCR:
      case DECR:
      case MODULO:
      case SUMAIGUAL:
      case RESTAIGUAL:
      case MULTIGUAL:
      case DIVIDIRIGUAL:
      case MODULOIGUAL:
      case VOID:
      case MAIN:
      case WRITE:
      case READ:
      case IF:
      case ELSE:
      case ELSEIF:
      case RETURN:
      case BREAK:
      case FOR:
      case WHILE:
      case PARI:
      case PARD:
      case LLAVEI:
      case LLAVED:
      case DELIMITER:
      case COMA:
      case COMILLA:
      case COMENTARIO:
      case PUNTO:
      case IGUALDAD:
      case MAYOR:
      case MAYORI:
      case MENOR:
      case MENORI:
      case DIFERENCIA:
      case NEGACION:
      case AND:
      case OR:
      case TRUE:
      case FALSE:
      case NULL:
      case INT:
      case FLOAT:
      case STRING:
      case BOOL:
      case CARACTER:
      case NUMERO:
      case IDENTIFICADOR:
      case DECIMAL:
      case CADENA:
      case CHAR:
      case DOSPUNTOS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        break;
      case MAS:
        jj_consume_token(MAS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        break;
      case MULTIPLICAR:
        jj_consume_token(MULTIPLICAR);
        break;
      case DIVIDIR:
        jj_consume_token(DIVIDIR);
        break;
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        break;
      case SUMAIGUAL:
        jj_consume_token(SUMAIGUAL);
        break;
      case RESTAIGUAL:
        jj_consume_token(RESTAIGUAL);
        break;
      case MULTIGUAL:
        jj_consume_token(MULTIGUAL);
        break;
      case DIVIDIRIGUAL:
        jj_consume_token(DIVIDIRIGUAL);
        break;
      case MODULOIGUAL:
        jj_consume_token(MODULOIGUAL);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      case MAIN:
        jj_consume_token(MAIN);
        break;
      case WRITE:
        jj_consume_token(WRITE);
        break;
      case READ:
        jj_consume_token(READ);
        break;
      case IF:
        jj_consume_token(IF);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        break;
      case ELSEIF:
        jj_consume_token(ELSEIF);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        break;
      case FOR:
        jj_consume_token(FOR);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        break;
      case IGUALDAD:
        jj_consume_token(IGUALDAD);
        break;
      case MAYOR:
        jj_consume_token(MAYOR);
        break;
      case MAYORI:
        jj_consume_token(MAYORI);
        break;
      case MENOR:
        jj_consume_token(MENOR);
        break;
      case MENORI:
        jj_consume_token(MENORI);
        break;
      case DIFERENCIA:
        jj_consume_token(DIFERENCIA);
        break;
      case NEGACION:
        jj_consume_token(NEGACION);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case NULL:
        jj_consume_token(NULL);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      case CARACTER:
        jj_consume_token(CARACTER);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case DECIMAL:
        jj_consume_token(DECIMAL);
        break;
      case CADENA:
        jj_consume_token(CADENA);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case DOSPUNTOS:
        jj_consume_token(DOSPUNTOS);
        break;
      case PARI:
        jj_consume_token(PARI);
        break;
      case PARD:
        jj_consume_token(PARD);
        break;
      case LLAVEI:
        jj_consume_token(LLAVEI);
        break;
      case LLAVED:
        jj_consume_token(LLAVED);
        break;
      case DELIMITER:
        jj_consume_token(DELIMITER);
        break;
      case COMA:
        jj_consume_token(COMA);
        break;
      case COMILLA:
        jj_consume_token(COMILLA);
        break;
      case COMENTARIO:
        jj_consume_token(COMENTARIO);
        break;
      case PUNTO:
        jj_consume_token(PUNTO);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GramaticaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffffe,0xfffffffe,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1ffffff,0x1ffffff,};
   }

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
